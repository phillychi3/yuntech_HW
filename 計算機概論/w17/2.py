"""
題目：
一個背包限重至多為W與放入N個物品。其中每個物品皆有重量與價值。每一個物品你可以選擇放入背包或不放入背包使得背包在限重範圍內達到最大價值。請問背包可達到的最大價值是多少?。

輸入測資說明： 測試資料會有數組，每組的第一行有兩個整數N(1<=N<=1000), W(1<=W<=1000)分別代表物品數量和背包限重。 接著有 N 行，每一行皆有2個正整數分別代表物品重量和價值，用空白隔開。(範圍為1~1000)

輸出測資說明： 輸出背包可達到的最大價值

此題請使用Dynamic Programming(動態規劃)解題
測試輸入資料請複製以下內容，貼上至網頁右上角"T"按鈕的黃色便條中，再按執行。
7 4
1 5
2 4
2 3
4 1
4 2
4 3
4 4
3 16
2 1
4 2
8 3

預期結果應為
9
6
"""

while True:
    try: 
        max_w = 1000
        N = 1000

        # 定義物品重量陣列和價值陣列，並將其初始化為0
        w, v = [0] * (N + 1), [0] * (N + 1)

        # 定義dp陣列，其中dp[i][j]表示選到第i個物品時，當背包容量為j的情況
        # 所能取得的最大價值
        dp = [[0 for j in range(max_w + 1)] for i in range(N + 1)]

        # 輸入物品數量n和背包容量limW
        n, limW = map(int, input().split())

        # 輸入每個物品的重量和價值
        for i in range(1, n + 1):
            w[i], v[i] = map(int, input().split())

        # 開始填表
        for i in range(1, n + 1):
            for j in range(1, limW + 1):
                # 如果當前背包容量不足以放下第i個物品
                #則dp[i][j]繼承dp[i-1][j]的值
                if j < w[i]: 
                    dp[i][j] = dp[i - 1][j]
                # 如果能夠放下第i個物品，則取放下和不放的最大值
                else: 
                    dp[i][j] = max(dp[i - 1][j],dp[i - 1][j-w[i]]+v[i])

        # 輸出最終的最大價值
        print(max(max(dp)))
    except EOFError:
        break